<!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN" "http://java.sun.com/dtd/web-app_2_3.dtd">
<web-app>
<display-name>Elastic Path Application</display-name>

  <!-- spring framework context configuration -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>/WEB-INF/elastic-path-servlet.xml</param-value>
  </context-param>
  <context-param>
    <param-name>log4jConfigLocation</param-name>
    <param-value>/WEB-INF/misc/log4j.properties</param-value>
  </context-param>
  
  <!-- Caching control filter -->
  <filter>
		<filter-name>Caching Control Filter</filter-name>
	    <filter-class>com.elasticpath.sfweb.filters.EpFilterToBeanProxy</filter-class>
	    <init-param>
	      <param-name>targetClass</param-name>
	      <param-value>com.elasticpath.commons.filter.impl.CachingControlFilter</param-value>
	    </init-param>
  </filter>
  
  <!-- ThreadLocal HttpSession Filter -->    
  <filter>
  	<filter-name>ThreadLocal HttpSession Filter</filter-name>
  	<filter-class>com.elasticpath.sfweb.filters.EpFilterToBeanProxy</filter-class>
  	<init-param>
  		<param-name>targetClass</param-name>
  		<param-value>com.elasticpath.sfweb.filters.ThreadLocalHttpSessionFilter</param-value>
  	</init-param>
  </filter>
  
  <!-- Encoding filter -->
  <filter>
    <filter-name>Encoding Filter</filter-name>
    <filter-class>com.elasticpath.commons.filter.impl.EncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
  </filter>


  <!-- Spring Security Filter -->
  <filter>
    <filter-name>Spring Security Filter Chain Proxy</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    <init-param>
      <param-name>targetBeanName</param-name>
      <param-value>springSecurityFilterChain</param-value>
    </init-param>
  </filter>

  <!-- Customer Session Filter -->
  <filter>
		<filter-name>Customer Session Filter</filter-name>
	    <filter-class>com.elasticpath.sfweb.filters.EpFilterToBeanProxy</filter-class>
	    <init-param>
	      <param-name>targetClass</param-name>
	      <param-value>com.elasticpath.sfweb.filters.CustomerSessionFilter</param-value>
	    </init-param>
  </filter>

  <!-- Url rewrite filter -->
  <filter>
		<filter-name>URL Rewrite Filter</filter-name>
	    <filter-class>com.elasticpath.sfweb.filters.EpFilterToBeanProxy</filter-class>
	    <init-param>
	      <param-name>targetClass</param-name>
	      <param-value>com.elasticpath.sfweb.filters.StoreUrlRewriteFilter</param-value>
	    </init-param>
	    <init-param>
	      <param-name>lifecycle</param-name>
	      <param-value>servlet-container-managed</param-value>
	    </init-param>
	    <init-param>
	      <param-name>confReloadCheckInterval</param-name>
	      <param-value>60</param-value>
	    </init-param>
		<init-param>
		  <param-name>confPath</param-name>
		  <param-value>setting:COMMERCE/SYSTEM/urlRewriteConfig</param-value>
		</init-param>
  </filter>

  <!-- Filter to determine which store is being access from the request -->
  <filter>
        <filter-name>Store Selection Filter</filter-name>
        <filter-class>com.elasticpath.sfweb.filters.EpFilterToBeanProxy</filter-class>
        <init-param>
          <param-name>targetClass</param-name>
          <param-value>com.elasticpath.sfweb.filters.StoreSelectionFilter</param-value>
        </init-param>
  </filter>
  
  <!-- Filter to check access to a store in RESTRICTED state -->
  <filter>
	<filter-name>Store Access Filter</filter-name>
	<filter-class>com.elasticpath.sfweb.filters.EpFilterToBeanProxy</filter-class>
	<init-param>
		<param-name>targetClass</param-name>
		<param-value>com.elasticpath.sfweb.filters.StoreAccessFilter</param-value>
	</init-param>
  </filter>
  
    <!-- Targeted Selling  filter -->
  <filter>
	<filter-name>Targeted Selling Filter</filter-name>
    <filter-class>com.elasticpath.sfweb.filters.EpFilterToBeanProxy</filter-class>
    <init-param>
      <param-name>targetClass</param-name>
      <param-value>com.elasticpath.sfweb.filters.TargetedSellingFilter</param-value>
    </init-param>
  </filter>

	<!-- Locale filter -->
	<filter>
		<filter-name>Locale Filter</filter-name>
		<filter-class>com.elasticpath.sfweb.filters.EpFilterToBeanProxy</filter-class>
		<init-param>
			<param-name>targetClass</param-name>
			<param-value>com.elasticpath.sfweb.filters.LocaleFilter</param-value>
		</init-param>
	</filter>


  <!-- filter mapping -->

	<filter-mapping>
		<filter-name>ThreadLocal HttpSession Filter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
  
  <filter-mapping>
    <filter-name>Encoding Filter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <filter-mapping>
    <filter-name>Store Selection Filter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <filter-mapping>
    <filter-name>Store Access Filter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <filter-mapping>
    <filter-name>Spring Security Filter Chain Proxy</filter-name>
    <url-pattern>*.ep</url-pattern>
  </filter-mapping>

  <filter-mapping>
    <filter-name>Spring Security Filter Chain Proxy</filter-name>
    <url-pattern>*.html</url-pattern>
  </filter-mapping>

  <filter-mapping>
    <filter-name>Spring Security Filter Chain Proxy</filter-name>
    <url-pattern>/dwr/call/*</url-pattern>
  </filter-mapping>

  <filter-mapping>
    <filter-name>Customer Session Filter</filter-name>
    <url-pattern>*.ep</url-pattern>
  </filter-mapping>

  <filter-mapping>
    <filter-name>Customer Session Filter</filter-name>
    <url-pattern>/index.jsp</url-pattern>
  </filter-mapping>

  <filter-mapping>
    <filter-name>Customer Session Filter</filter-name>
    <url-pattern>*.html</url-pattern>
  </filter-mapping>

  <filter-mapping>
    <filter-name>Customer Session Filter</filter-name>
    <url-pattern>/dwr/call/*</url-pattern>
  </filter-mapping>

  <filter-mapping>
    <filter-name>Targeted Selling Filter</filter-name>
    <url-pattern>*.ep</url-pattern>
  </filter-mapping>

   <filter-mapping>
    <filter-name>Targeted Selling Filter</filter-name>
    <url-pattern>/index.jsp</url-pattern>
  </filter-mapping>

  <filter-mapping>
    <filter-name>Targeted Selling Filter</filter-name>
    <url-pattern>*.html</url-pattern>
  </filter-mapping>


  <!-- Locale Filter needs to come before the URL Rewrite filter to enable localised display names for SEO. -->
	<filter-mapping>
		<filter-name>Locale Filter</filter-name>
		<url-pattern>*.ep</url-pattern>
	</filter-mapping>

	<filter-mapping>
		<filter-name>Locale Filter</filter-name>
		<url-pattern>/index.jsp</url-pattern>
	</filter-mapping>

	<filter-mapping>
		<filter-name>Locale Filter</filter-name>
		<url-pattern>*.html</url-pattern>
	</filter-mapping>

  <filter-mapping>
	<filter-name>URL Rewrite Filter</filter-name>
	<url-pattern>*.html</url-pattern>
  </filter-mapping>

  <filter-mapping>
    <filter-name>Caching Control Filter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <listener>
  	<listener-class>com.elasticpath.web.context.impl.EpLog4jConfigListener</listener-class>
  </listener>

  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <listener>
    <listener-class>com.elasticpath.sfweb.context.impl.EpContextConfigListener</listener-class>
  </listener>

  <!-- spring log4j configurer
  <servlet>
    <servlet-name>log4j</servlet-name>
    <servlet-class>org.springframework.web.util.Log4jConfigServlet</servlet-class>
    <load-on-startup>0</load-on-startup>
  </servlet>
  -->
  <!-- spring context loader configuration
  <servlet>
    <servlet-name>context</servlet-name>
    <servlet-class>org.springframework.web.context.ContextLoaderServlet</servlet-class>
    <load-on-startup>1</load-on-startup>
  </servlet>
  -->
  <!-- Elastic Path Store Front MVC application controller. -->
  <servlet>
    <servlet-name>store</servlet-name>
    <servlet-class>com.elasticpath.sfweb.servlet.EpDispatcherServlet</servlet-class>
    <!-- This is TagProcessorHolder name in Spring context -->
    <init-param>
     <param-name>tagProcessorsHolder</param-name>
     <param-value>tagProcessorsHolder</param-value>
    </init-param>
    <load-on-startup>2</load-on-startup>
  </servlet>

  
  <!-- !!!! DOCStoreFrontDWRwebxml -->
  <!-- DWR - Direct Web Remoting -->
  <servlet>
    <servlet-name>dwr-invoker</servlet-name>
    <display-name>DWR Servlet</display-name>
    <servlet-class>org.directwebremoting.servlet.DwrServlet</servlet-class>
    <init-param>
     <param-name>debug</param-name>
     <param-value>false</param-value>
    </init-param>
    <init-param>
     <param-name>config</param-name>
     <param-value>/WEB-INF/dwr.xml</param-value>
    </init-param>
  </servlet>

  <!--servlet mapping -->

  <servlet-mapping>
    <servlet-name>dwr-invoker</servlet-name>
    <url-pattern>/dwr/*</url-pattern>
  </servlet-mapping>

<!-- !!!! DOCStoreFrontDWRwebxml -->
  <servlet-mapping>
    <servlet-name>store</servlet-name>
    <url-pattern>*.ep</url-pattern>
  </servlet-mapping>
  
  <servlet-mapping>
    <servlet-name>store</servlet-name>
    <url-pattern>/renderImage.image</url-pattern>
  </servlet-mapping>
  
  <servlet-mapping>
    <servlet-name>store</servlet-name>
    <url-pattern>/template-resources/*</url-pattern>
  </servlet-mapping>
  
  <servlet-mapping>
    <servlet-name>store</servlet-name>
    <url-pattern>/content/*</url-pattern>
  </servlet-mapping>

  <session-config>
    <session-timeout>5</session-timeout>
  </session-config>

  <mime-mapping>
    <extension>html</extension>
    <mime-type>text/html</mime-type>
  </mime-mapping>

  <mime-mapping>
    <extension>txt</extension>
    <mime-type>text/plain</mime-type>
  </mime-mapping>

  <mime-mapping>
    <extension>xml</extension>
    <mime-type>text/xml</mime-type>
  </mime-mapping>

  <mime-mapping>
    <extension>gif</extension>
    <mime-type>image/gif</mime-type>
  </mime-mapping>
  
  <mime-mapping>
    <extension>jpg</extension>
    <mime-type>image/jpeg</mime-type>
  </mime-mapping>
  
  <mime-mapping>
    <extension>tif</extension>
    <mime-type>image/tiff</mime-type>
  </mime-mapping>
  
  <mime-mapping>
    <extension>jpeg</extension>
    <mime-type>image/jpeg</mime-type>
  </mime-mapping>

  <mime-mapping>
    <extension>bmp</extension>
    <mime-type>image/bmp</mime-type>
  </mime-mapping>
  
  <mime-mapping>
    <extension>png</extension>
    <mime-type>image/png</mime-type>
  </mime-mapping>

  <!-- The Welcome File List -->
  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>

  <error-page>
    <exception-type>com.elasticpath.commons.exception.EpLicensingMissingException</exception-type>
    <location>/licensing-error.ep?errorCode=missing</location>
  </error-page>
  <error-page>
    <exception-type>com.elasticpath.commons.exception.EpLicensingInvalidException</exception-type>
    <location>/licensing-error.ep?errorCode=invalid</location>
  </error-page>
  <error-page>
    <exception-type>com.elasticpath.commons.exception.EpLicensingCorruptedException</exception-type>
    <location>/licensing-error.ep?errorCode=corrupted</location>
  </error-page>
  <error-page>
    <exception-type>com.elasticpath.commons.exception.EpLicensingExpiredException</exception-type>
    <location>/licensing-error.ep?errorCode=expired</location>
  </error-page>
  <error-page>
    <exception-type>java.lang.Exception</exception-type>
    <location>/error.ep?errorCode=500</location>
  </error-page>
  <error-page>
    <error-code>400</error-code>
    <location>/error.ep?errorCode=400</location>
  </error-page>
  <error-page>
    <error-code>404</error-code>
    <location>/error.ep?errorCode=404</location>
  </error-page>
  <error-page>
    <error-code>500</error-code>
    <location>/error.ep?errorCode=500</location>
  </error-page>
  <error-page>
    <error-code>403</error-code>
    <location>/sign-in.ep</location>
  </error-page>

	<!-- Datasource Configuration -->
	<resource-ref>
		<description>DB Connection</description>
		<res-ref-name>jdbc/epjndi</res-ref-name>
		<res-type>javax.sql.DataSource</res-type>
		<res-auth>Container</res-auth>
	</resource-ref>

  <!-- Log4j context -->
  <env-entry>
	<description>Sets the logging context (for logging hierachy separation in web-app)</description>
	<env-entry-name>logging-context</env-entry-name>
	<env-entry-value>sf</env-entry-value>
	<env-entry-type>java.lang.String</env-entry-type>
  </env-entry>
  
</web-app>

