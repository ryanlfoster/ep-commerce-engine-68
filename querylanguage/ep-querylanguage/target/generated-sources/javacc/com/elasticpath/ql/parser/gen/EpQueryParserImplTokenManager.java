/* Generated By:JavaCC: Do not edit this line. EpQueryParserImplTokenManager.java */
package com.elasticpath.ql.parser.gen;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import com.elasticpath.ql.parser.EpQuery;
import com.elasticpath.ql.parser.EpQLTerm;
import com.elasticpath.ql.parser.EpQueryAssembler;
import com.elasticpath.ql.parser.EpQueryParser;
import com.elasticpath.ql.parser.EpQLParseException;
import com.elasticpath.ql.parser.query.NativeBooleanClause;
import com.elasticpath.ql.parser.query.NativeQuery;

/** Token Manager. */
@SuppressWarnings({"cast", "classfile", "deprecation", "dep-ann", "divzero",
					"empty", "fallthrough", "finally", "options", "overrides",
					"path", "processing", "rawtypes", "serial", "static",
					"try", "unchecked", "varargs", "PMD"}) public class EpQueryParserImplTokenManager implements EpQueryParserImplConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 31;
            return 30;
         }
         if ((active0 & 0x400000L) != 0L)
            return 43;
         if ((active0 & 0x3e80L) != 0L)
         {
            jjmatchedKind = 31;
            return 42;
         }
         return -1;
      case 1:
         if ((active0 & 0x3f80L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 1;
            return 42;
         }
         return -1;
      case 2:
         if ((active0 & 0x3d00L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 2;
            return 42;
         }
         if ((active0 & 0x280L) != 0L)
            return 42;
         return -1;
      case 3:
         if ((active0 & 0x3800L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 3;
            return 42;
         }
         if ((active0 & 0x500L) != 0L)
            return 42;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 40:
         return jjStopAtPos(0, 24);
      case 41:
         return jjStopAtPos(0, 25);
      case 60:
         jjmatchedKind = 17;
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 61:
         return jjStopAtPos(0, 14);
      case 62:
         jjmatchedKind = 19;
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x80L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 91:
         return jjStopAtPos(0, 26);
      case 93:
         return jjStopAtPos(0, 27);
      case 123:
         return jjStartNfaWithStates_0(0, 22, 43);
      case 125:
         return jjStopAtPos(0, 23);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         else if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(1, 16);
         else if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(1, 18);
         break;
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x1300L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 68:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 9, 42);
         break;
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
      case 84:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 7, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 42);
         else if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 42);
         break;
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x2800L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 11, 42);
         break;
      case 84:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 12, 42);
         else if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 43;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 43:
               case 15:
                  jjCheckNAddStates(0, 2);
                  break;
               case 30:
               case 42:
                  if ((0x8ffffc78ffffd9ffL & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAdd(42);
                  break;
               case 2:
                  if ((0x8ffffc78ffffd9ffL & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAdd(42);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(3, 5);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                     jjCheckNAddStates(6, 8);
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(23);
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 3;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 28)
                        kind = 28;
                     jjCheckNAdd(20);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 28)
                        kind = 28;
                  }
                  break;
               case 3:
                  if (curChar == 38 && kind > 5)
                     kind = 5;
                  break;
               case 4:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 9:
               case 12:
                  if (curChar == 39)
                     jjCheckNAddStates(3, 5);
                  break;
               case 10:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 13:
                  if (curChar == 39 && kind > 20)
                     kind = 20;
                  break;
               case 19:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAdd(20);
                  break;
               case 21:
                  if (curChar == 48 && kind > 28)
                     kind = 28;
                  break;
               case 22:
                  if (curChar == 46)
                     jjCheckNAdd(23);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAdd(23);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAddStates(6, 8);
                  break;
               case 41:
                  if ((0x8ffffc78ffffd9ffL & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(42);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 43:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 125)
                  {
                     if (kind > 21)
                        kind = 21;
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 30:
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAdd(42);
                  }
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 2:
                  if ((0xd7ffffffd7ffffffL & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAdd(42);
                  }
                  else if (curChar == 123)
                     jjCheckNAddStates(0, 2);
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 38;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 34;
                  else if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 30;
                  else if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 26;
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 5;
                  else if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 0:
                  if (curChar == 68 && kind > 5)
                     kind = 5;
                  break;
               case 1:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 5:
                  if (curChar == 82 && kind > 6)
                     kind = 6;
                  break;
               case 6:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 124 && kind > 6)
                     kind = 6;
                  break;
               case 8:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 10:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 11:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if (curChar == 92)
                     jjCheckNAddStates(3, 5);
                  break;
               case 14:
                  if (curChar == 123)
                     jjCheckNAddStates(0, 2);
                  break;
               case 15:
                  if ((0xd7ffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 16:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0x2800000010000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 18:
                  if (curChar == 125 && kind > 21)
                     kind = 21;
                  break;
               case 24:
                  if (curChar == 69 && kind > 30)
                     kind = 30;
                  break;
               case 25:
                  if (curChar == 85)
                     jjCheckNAdd(24);
                  break;
               case 26:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 83)
                     jjCheckNAdd(24);
                  break;
               case 29:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 31:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 101 && kind > 30)
                     kind = 30;
                  break;
               case 33:
                  if (curChar == 117)
                     jjCheckNAdd(32);
                  break;
               case 34:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 115)
                     jjCheckNAdd(32);
                  break;
               case 37:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 41:
                  if ((0xd7ffffffd7ffffffL & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(42);
                  break;
               case 42:
                  if ((0xd7ffffffd7ffffffL & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAdd(42);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 43:
               case 15:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(0, 2);
                  break;
               case 30:
               case 42:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAdd(42);
                  break;
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(42);
                  break;
               case 10:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(3, 5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 43 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   15, 16, 18, 10, 11, 13, 22, 23, 40, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, "\116\117\124", "\106\111\116\104", 
"\125\111\104", "\107\125\111\104", "\127\110\105\122\105", "\114\111\115\111\124", 
"\123\124\101\122\124", "\75", "\41\75", "\74\75", "\74", "\76\75", "\76", null, null, "\173", "\175", 
"\50", "\51", "\133", "\135", null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x1ffffffe1L, 
};
static final long[] jjtoSkip = {
   0x1eL, 
};
protected CharStream input_stream;
private final int[] jjrounds = new int[43];
private final int[] jjstateSet = new int[86];
protected char curChar;
/** Constructor. */
public EpQueryParserImplTokenManager(CharStream stream){
   input_stream = stream;
}

/** Constructor. */
public EpQueryParserImplTokenManager(CharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 43; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
