/* Generated By:JavaCC: Do not edit this line. EpQueryParserImpl.java */
package com.elasticpath.ql.parser.gen;

import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;

import com.elasticpath.ql.parser.EpQuery;
import com.elasticpath.ql.parser.EpQLTerm;
import com.elasticpath.ql.parser.EpQueryAssembler;
import com.elasticpath.ql.parser.EpQueryParser;
import com.elasticpath.ql.parser.EpQLParseException;
import com.elasticpath.ql.parser.query.NativeBooleanClause;
import com.elasticpath.ql.parser.query.NativeQuery;
@SuppressWarnings({"cast", "classfile", "deprecation", "dep-ann", "divzero",
					"empty", "fallthrough", "finally", "options", "overrides",
					"path", "processing", "rawtypes", "serial", "static",
					"try", "unchecked", "varargs", "PMD"}) 
public class EpQueryParserImpl implements EpQueryParser, EpQueryParserImplConstants {

    private EpQueryAssembler epQueryAssembler;

        /**
	 * Constructs a query parser.
	 */
    public EpQueryParserImpl() {
        this(new FastCharStream(new StringReader("")));
    }

    /**
     * Sets query assembler helping to populate EpQuery.
     * 
     * @param epQueryAssembler assembler of EpQuery
     */
    public void setEpQueryAssembler(final EpQueryAssembler epQueryAssembler) {
        this.epQueryAssembler = epQueryAssembler;
    }

        /**
	 * Parses a query string, returning a {@link org.apache.lucene.search.Query}.
	 * 
	 * @param query the query string to be parsed.
     * @throws ParseException if the parsing fails
     */
    public EpQuery parse(final String query) throws EpQLParseException {
                if (epQueryAssembler == null) {
                        throw new EpQLParseException("Ep Query Composer wasn't set properly.");
                }
                final EpQuery epQuery = new EpQuery();
                ReInit(new FastCharStream(new StringReader(query)));
                try {
                        NativeQuery res = topLevelQuery(epQuery);
                        res = epQueryAssembler.postParseHandling(epQuery, res);
                        epQuery.setNativeQuery(res);
                        return epQuery;
                } catch (ParseException tme) {
                        // rethrow to include the original query:
                        throw new EpQLParseException("Cannot parse '" + query + "': " + tme.getMessage());
                } catch (TokenMgrError tme) {
                        throw new EpQLParseException("Cannot parse '" + query + "': " + tme.getMessage());
                } catch (RuntimeException exception) {
                        throw new EpQLParseException("Cannot parse '" + query + ":" +  exception.getMessage());
                }
        }

    /**
	 * Verify a query string, returning a {@link org.apache.lucene.search.Query}.
	 * 
	 * @param query the query string to be parsed.
	 * @return string representation of lucene query
	 * @throws EpQLParseException if the parsing fails
	 */
        public String verify(final String query) throws EpQLParseException {
                if (epQueryAssembler == null) {
                        throw new EpQLParseException("Ep Query Composer wasn't set properly.");
                }
                final EpQuery epQuery = new EpQuery();
                epQuery.setValidateOnly(true);
                ReInit(new FastCharStream(new StringReader(query)));

                try {
                        NativeQuery res = topLevelQuery(epQuery);
                        res = epQueryAssembler.postParseHandling(epQuery, res);
                        epQuery.setNativeQuery(res);
                        return epQuery.toString();
                } catch (ParseException tme) {
                        throw new EpQLParseException("Cannot parse '" + query + "': " + tme.getMessage());
                } catch (TokenMgrError tme) {
                        throw new EpQLParseException("Cannot parse '" + query + "': " + tme.getMessage());
                } catch (RuntimeException exception) {
                        throw new EpQLParseException("Cannot parse '" + query + ":" +  exception.getMessage());
                }
        }

/**
 * Note: in future we can also have the following syntax: <FIND> getQueryType() <BY> getFetchType() <WHERE> {q = query();} [limit()] <EOF><br>
 * allowing us to specify return type.
 */
  final public NativeQuery topLevelQuery(final EpQuery epQuery) throws ParseException {
  NativeQuery q = null;
    jj_consume_token(FIND);
    getQueryType(epQuery);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      jj_consume_token(WHERE);
                                           q = query(epQuery);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LIMIT:
    case START:
      range(epQuery);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(0);
      {if (true) return q;}
    throw new Error("Missing return statement in function");
  }

  final public void range(final EpQuery epQuery) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LIMIT:
      limit(epQuery);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case START:
        start(epQuery);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      break;
    case START:
      start(epQuery);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LIMIT:
        limit(epQuery);
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void getQueryType(final EpQuery epQuery) throws ParseException {
  Token type;
    type = jj_consume_token(TERM);
      epQueryAssembler.checkQueryType(epQuery, type.image);
  }

  final public void getFetchType(final EpQuery epQuery) throws ParseException {
  Token type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UID:
      type = jj_consume_token(UID);
      break;
    case GUID:
      type = jj_consume_token(GUID);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      epQueryAssembler.checkFetchType(epQuery, type.image);
  }

  final public void limit(final EpQuery epQuery) throws ParseException {
  Token limit;
    jj_consume_token(LIMIT);
    limit = jj_consume_token(DECIMAL_LITERAL);
          epQueryAssembler.checkLimit(epQuery, limit.image);
  }

  final public void start(final EpQuery epQuery) throws ParseException {
  Token start;
    jj_consume_token(START);
    start = jj_consume_token(DECIMAL_LITERAL);
         epQueryAssembler.checkStartIndex(epQuery, start.image);
  }

  final public NativeQuery query(final EpQuery epQuery) throws ParseException {
    final List<NativeBooleanClause> clauses = new ArrayList<NativeBooleanClause>();
    NativeQuery q = null;
    q = andExpression(epQuery);
      epQueryAssembler.addClause(epQuery, clauses, CONJ_NONE, q, "");
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_1;
      }
      jj_consume_token(OR);
      q = andExpression(epQuery);
          epQueryAssembler.addClause(epQuery, clauses, CONJ_OR, q, "");
    }
        {if (true) return epQueryAssembler.getBooleanQuery(epQuery, clauses);}
    throw new Error("Missing return statement in function");
  }

  final public NativeQuery andExpression(EpQuery epQuery) throws ParseException {
    final List<NativeBooleanClause> clauses = new ArrayList<NativeBooleanClause>();
    NativeQuery q = null;
    q = notExpression(epQuery);
          epQueryAssembler.addClause(epQuery, clauses, CONJ_NONE, q, "");
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_2;
      }
      jj_consume_token(AND);
      q = notExpression(epQuery);
          epQueryAssembler.addClause(epQuery, clauses, CONJ_AND, q, "");
    }
        {if (true) return epQueryAssembler.getBooleanQuery(epQuery, clauses);}
    throw new Error("Missing return statement in function");
  }

  final public NativeQuery notExpression(EpQuery epQuery) throws ParseException {
        final List<NativeBooleanClause> clauses = new ArrayList<NativeBooleanClause>();
        NativeQuery q = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LROUND:
    case TERM:
      q = clause(epQuery, CONJ_NONE, clauses);
      break;
    case NOT:
      jj_consume_token(NOT);
      q = clause(epQuery, CONJ_NOT, clauses);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return epQueryAssembler.getBooleanQuery(epQuery, clauses);}
    throw new Error("Missing return statement in function");
  }

  final public NativeQuery clause(final EpQuery epQuery, int conj, final List<NativeBooleanClause> clauses) throws ParseException {
        NativeQuery q;
    Token fieldToken = null;
    Token parameter2Token = null;
    String field = null;
    Token operator = null;
    Token parameter1Token = null;
    Token term;
    if (jj_2_1(2)) {
      fieldToken = jj_consume_token(TERM);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATTR_NAME:
        parameter2Token = jj_consume_token(ATTR_NAME);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSQUARE:
        jj_consume_token(LSQUARE);
        parameter1Token = jj_consume_token(TERM);
        jj_consume_token(RSQUARE);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        operator = jj_consume_token(EQ);
        break;
      case NOT_EQ:
        operator = jj_consume_token(NOT_EQ);
        break;
      case LESS:
        operator = jj_consume_token(LESS);
        break;
      case LESS_EQ:
        operator = jj_consume_token(LESS_EQ);
        break;
      case MORE_:
        operator = jj_consume_token(MORE_);
        break;
      case MORE_EQ:
        operator = jj_consume_token(MORE_EQ);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TERM:
        term = jj_consume_token(TERM);
        break;
      case QUOTED:
        term = jj_consume_token(QUOTED);
        break;
      case FLOATING_POINT_LITERAL:
        term = jj_consume_token(FLOATING_POINT_LITERAL);
        break;
      case DECIMAL_LITERAL:
        term = jj_consume_token(DECIMAL_LITERAL);
        break;
      case BOOLEAN_LITERAL:
        term = jj_consume_token(BOOLEAN_LITERAL);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                    EpQLTerm epQLTerm = new EpQLTerm(fieldToken.image, parameter1Token == null ? null : parameter1Token.image,
                        parameter2Token == null ? null : parameter2Token.image.substring(1, parameter2Token.image.length() - 1),
                        operator.image, term.image);
                    q = epQueryAssembler.getFieldQuery(epQuery, epQLTerm);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LROUND:
        jj_consume_token(LROUND);
        q = query(epQuery);
        jj_consume_token(RROUND);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
            if (operator == null) {
                epQueryAssembler.addClause(epQuery, clauses, conj, q, "");
            } else {
                epQueryAssembler.addClause(epQuery, clauses, conj, q, operator.image);
            }
            {if (true) return q;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3_1() {
    if (jj_scan_token(TERM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(21)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_3()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_3() {
    if (jj_scan_token(LSQUARE)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public EpQueryParserImplTokenManager token_source;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x800,0x3000,0x2000,0x1000,0x3000,0x600,0x40,0x20,0x1000080,0x200000,0x4000000,0xfc000,0x70100000,0x1000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with user supplied CharStream. */
  public EpQueryParserImpl(CharStream stream) {
    token_source = new EpQueryParserImplTokenManager(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public EpQueryParserImpl(EpQueryParserImplTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(EpQueryParserImplTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }
@SuppressWarnings({"cast", "classfile", "deprecation", "dep-ann", "divzero",
					"empty", "fallthrough", "finally", "options", "overrides",
					"path", "processing", "rawtypes", "serial", "static",
					"try", "unchecked", "varargs", "PMD"}) 
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[33];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 33; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }
@SuppressWarnings({"cast", "classfile", "deprecation", "dep-ann", "divzero",
					"empty", "fallthrough", "finally", "options", "overrides",
					"path", "processing", "rawtypes", "serial", "static",
					"try", "unchecked", "varargs", "PMD"}) 
  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
