<?xml version="1.0" encoding="UTF-8"?>
<jobs>
	<import file="common.xml" />
	<import file="archetype-common.xml" />

	<!--
		These jobs can be used as a basis to form a new pipeline for a complete build. The pipeline has 3 steps
		(-Build, -Archetypes, -Final). If any of these jobs fail, they will trigger the -Final job directly.

		In order to utilize these job, you must create 4 jobs which extend each of the abstract jobs. These jobs
		must have the following naming convention otherwise you will have to override and define the invocation
		triggers manually.

			{prefix}-{buildname}

		For example, if you want to have the prefix `Trunk-Bash', then you would have to create the jobs

			Trunk-Bash-Build
			Trunk-Bash-Archetypes
			Trunk-Bash-Final

		each extending the appropriate abstract job. This prefix will also be used to form the basis of the
		snapshot repository id for nexus.
	-->

	<job>
		<id>abstract-pipeline-start</id>
		<parent>abstract-scm</parent>
		<abstract>true</abstract>
		<appendTasks>true</appendTasks>

		<mavenOpts>${mavenOpts.nightlyBuild}</mavenOpts>
		<mavenGoals><![CDATA[
			-B -U -e clean deploy site-deploy -P ,${maven.nightly.profiles} -DskipExtensions
			-Denv.SNAPSHOT_REPOSITORY_ID="${nightlySnapshotRepoId}"
			-Denv.RELEASE_REPOSITORY_ID=$RELEASE_REPOSITORY_ID
			-Dep.platform.site.url="${maven.site.baseUrl}/${nightlySnapshotRepoId}"
			-Dinvoker.settingsFile="$WORKSPACE/${settingsLocation}"
		]]></mavenGoals>
		<appendTasks>true</appendTasks>

		<parameters>
			<parameter>
				<type>string</type>
				<name>RELEASE_REPOSITORY_ID</name>
				<value>${dummyRepoValue}</value>
				<description>ID of Release Repository to use. Use the default value if you don't require a default release repository.</description>
			</parameter>
		</parameters>

		<publishers>
		<![CDATA[
			<!-- Archive old FIT reports -->
			<com.elasticpath.hudson.plugins.fit.FitArchiver>
			    <pathToHtml>**/target/site/fitresults/</pathToHtml>
			</com.elasticpath.hudson.plugins.fit.FitArchiver>

			${emailExtConfig}
		]]>
		</publishers>

		<reporters>
		<![CDATA[
			${checkstyleReportConfig}
			${pmdReportConfig}
		]]>
		</reporters>

		<prebuildersTasks>
			<shell>
				<command>
				<![CDATA[
					mkdir -p target/nexus-work
					echo "<project><modelVersion>4.0.0</modelVersion><groupId>dummy</groupId><artifactId>dummy</artifactId><version>1.0-SNAPSHOT</version></project>" > target/nexus-work/pom.xml
				]]>
				</command>
			</shell>
			<maven>
				<mavenName>${mavenName}</mavenName>
				<jvmOptions>${mavenOpts.common}</jvmOptions>
				<pom>target/nexus-work/pom.xml</pom>
				<targets>-U -e com.elasticpath.tools:ep-nexus-client-plugin:delete-old-repositories</targets>
				<properties>
				<![CDATA[
					nexusBaseUrl=${maven.repo.baseUrl}
					repoGroupId=${nightlySnapshotRepoGroup}
					repoIdPrefix=${nightlySnapshotRepoPreifx}
					maxBadRepo=${ungroupedReposToKeep}
					maxGoodRepo=${groupedReposToKeep}
				]]>
				</properties>
			</maven>
			<maven>
				<mavenName>${mavenName}</mavenName>
				<jvmOptions>${mavenOpts.common}</jvmOptions>
				<pom>target/nexus-work/pom.xml</pom>
				<targets>-e com.elasticpath.tools:ep-nexus-client-plugin:create-hosted-repository</targets>
				<properties>
				<![CDATA[
					nexusBaseUrl=${maven.repo.baseUrl}
					repoId=${nightlySnapshotRepoId}
				]]>
				</properties>
			</maven>
		</prebuildersTasks>

		<runPostStepsIfResult>unstable</runPostStepsIfResult>
		<postbuildersTasks>
			<shell>
				<command>
				<![CDATA[
					mkdir -p target/nexus-work
					echo "<project><modelVersion>4.0.0</modelVersion><groupId>dummy</groupId><artifactId>dummy</artifactId><version>1.0-SNAPSHOT</version></project>" > target/nexus-work/pom.xml
				]]>
				</command>
			</shell>
			<maven>
				<mavenName>${mavenName}</mavenName>
				<jvmOptions>${mavenOpts.common}</jvmOptions>
				<targets>-e com.elasticpath.tools:ep-nexus-client-plugin:add-repository-to-group</targets>
				<pom>target/nexus-work/pom.xml</pom>
				<properties>
				<![CDATA[
					nexusBaseUrl=${maven.repo.baseUrl}
					repoGroupId=${nightlySnapshotRepoGroup}
					repoId=${nightlySnapshotRepoId}
				]]>
				</properties>
			</maven>
		</postbuildersTasks>

		<process>
		<![CDATA[
			import com.elasticpath.releng.builds.JobUtils
			import com.elasticpath.releng.builds.PipelineUtils
			${configureScmProcessGroovy}

			def extraParameters = [
				SCM_REVISION: '''${mavenCommitId}''',
				SNAPSHOT_REPOSITORY_ID: '''${nightlySnapshotRepoId}''',
				EP_PLATFORM_SITE_URL: '''${maven.site.baseUrl}/${nightlySnapshotRepoId}''',
			]

			def jobName = file.getParentFile().getName()
			new PipelineUtils().addTriggerJobs(jobName, node, extraParameters, extraParameters)
		]]>
		</process>
	</job>

	<job>
		<id>abstract-pipeline-archetypes</id>
		<parent>abstract-archetypes</parent>
		<abstract>true</abstract>

		<parameters>
			<parameter>
				<type>string</type>
				<name>EP_PLATFORM_SITE_URL</name>
				<value />
				<description>
					Site url to deploy documents to. This is usually passed automatically by a previous pipeline job.
				</description>
			</parameter>
			<parameter>
				<type>string</type>
				<name>RELEASE_REPOSITORY_ID</name>
				<value>${dummyRepoValue}</value>
				<description>ID of Release Repository to use. This is usually passed automatically by a previous pipeline job.</description>
			</parameter>
		</parameters>

		<process>
		<![CDATA[
			import com.elasticpath.releng.builds.PipelineUtils
			${configureScmProcessGroovy}

			def jobName = file.getParentFile().getName()
			new PipelineUtils().addTriggerJobs(jobName, node)
		]]>
		</process>
	</job>

	<job>
		<id>abstract-pipeline-finish</id>
		<parent>abstract-triggered</parent>
		<abstract>true</abstract>
		<appendTasks>true</appendTasks>

		<parameters>
			<parameter>
				<type>string</type>
				<name>EP_PLATFORM_SITE_URL</name>
				<value />
				<description>
					Site url to deploy documents to. This is usually passed automatically by a previous pipeline job.
				</description>
			</parameter>
			<parameter>
				<type>string</type>
				<name>RELEASE_REPOSITORY_ID</name>
				<value>${dummyRepoValue}</value>
				<description>ID of Release Repository to use. This is usually passed automatically by a previous pipeline job.</description>
			</parameter>
		</parameters>

		<process>
		<![CDATA[
			import com.elasticpath.releng.builds.PipelineUtils
			${configureScmProcessGroovy}

			def jobName = file.getParentFile().getName()
			new PipelineUtils().addTriggerJobs(jobName, node)
		]]>
		</process>
	</job>
</jobs>
